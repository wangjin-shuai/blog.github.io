{"title":"Android通知栏操作","slug":"android通知栏","date":"2019-07-13T02:25:42.000Z","updated":"2019-07-13T02:42:57.151Z","comments":true,"path":"api/articles/android通知栏.json","photos":[],"link":"","excerpt":" Android通知提示","covers":null,"content":"<h2 id=\"Android通知提示\"><a href=\"#Android通知提示\" class=\"headerlink\" title=\" Android通知提示\"></a><center> Android通知提示<center></center></center></h2><a id=\"more\"></a>\n\n<pre><code>    之前项目一直使用极光推送，极光推送自带通知提示，由于项目需求，\n极光的推送提示不能满足要求，所以只能自己完成推送提示操作。</code></pre><hr>\n<pre><code>import android.annotation.TargetApi;\nimport android.app.Notification;\nimport android.app.NotificationChannel;\nimport android.app.NotificationManager;\nimport android.app.PendingIntent;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.graphics.BitmapFactory;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.support.v4.app.NotificationCompat;\n\nimport com.leiren.airport.plat.R;\nimport com.leiren.airport.plat.activity.HomeActivity;\n\nimport java.util.Date;\n\npublic class CustomNotification {\n\n//自定义通知对象\nprivate static CustomNotification customNotification = null;\n\n//通知管理器\nprivate static NotificationManager notificationManager = null;\n\n//通知ID\nprivate static int notifiId = 0;\n\n//通知标签\nprivate static String notifiTag = &quot;&quot;;\nstatic {\n    customNotification = new CustomNotification();\n}\n\nprivate CustomNotification(){\n    super();\n}\n\npublic static CustomNotification getInstance(){\n    return customNotification == null? new CustomNotification():customNotification;\n}\n\n\npublic void builderNotification(Context context,String sender,String title, String content, String extra){\n    //此处判断安卓版本号是否大于或者等于Android8.0\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {\n        //通知栏提示\n        notification_8(context,sender,title,content,extra);\n    } else {\n        //通知栏提示\n        commonNotification(context,sender,title,content,extra);\n    }\n}\n\n/**\n * Android5.0-8.0以下\n * @param context 上下文对象\n * @param sender    一般为app名称\n * @param title     推送标题\n * @param content   推送内容\n */\n@TargetApi(21)\nprivate void commonNotification(Context context,String sender,String title, String content, String extra){\n    //获取通知管理器，用于发送通知\n    notificationManager = notificationManager == null?\n            (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE):notificationManager;\n    //发送通知\n    sendNotification(context,sender,title,content,extra);\n}\n\n/**\n * android8.0以上\n * @param context\n * @param sender\n * @param title\n * @param content\n * @param extra\n */\n@TargetApi(Build.VERSION_CODES.O)\npublic void notification_8(Context context,String sender,String title, String content, String extra){\n    //创建通道对象\n    NotificationChannel channel = new NotificationChannel(&quot;com.leiren.airplat&quot;, &quot;其他&quot;, NotificationManager.IMPORTANCE_HIGH);\n    notificationManager = notificationManager == null?\n            (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE):notificationManager;\n    //设置通道\n    notificationManager.createNotificationChannel(channel);\n    //发送通知\n    sendNotification(context,sender,title,content,extra);\n}\n\n\n\nprivate void sendNotification\n(Context context, String sender, String title,String content,String extra){\n    // 创建一个Notification对象\n    final NotificationCompat.Builder notification =\n             new NotificationCompat.Builder(context);\n    // 设置打开该通知，该通知自动消失\n    notification.setAutoCancel(true);\n    // 设置显示在状态栏的通知提示信息\n    notification.setTicker(sender);\n    // 设置通知的小图标\n    notification.setSmallIcon(R.drawable.ic_launcher);\n    //设置下拉列表中的大图标\n    notification.setLargeIcon(BitmapFactory.decodeResource(context.getResources(),R.drawable.ic_launcher));\n    // 设置通知内容的标题\n    notification.setContentTitle(title);\n    // 设置通知内容\n    notification.setContentText(content);\n    //设置发送时间\n    notification.setWhen(System.currentTimeMillis());\n    notification.setPriority(Notification.PRIORITY_MAX);//设置通知的优先级\n    //向通知添加声音、闪灯和振动效果的最简单、最一致的方式是使用当前的用户默认设置，使用defaults属性，可以组合\n    notification.setDefaults(Notification.DEFAULT_ALL);\n\n    //设置通知的等级\n    // VISIBILITY_PUBLIC: 任何情况的显示\n    //VISIBILITY_PRIVATE: 只有在没有锁屏时显示\n    //VISIBILITY_SECRET: 在安全锁下或者没锁屏下显示\n    notification.setVisibility(Notification.VISIBILITY_PUBLIC);\n\n    // 关联PendingIntent 设置之后会一直显示悬浮通知不会消失\n    //notification.setFullScreenIntent(pIntent1, true);\n\n    // 创建一个启动其他Activity的Intent\n    Intent intent = new Intent(&quot;cn.jpush.android.intent.NOTIFICATION_OPENED&quot;);\n    intent.putExtra(&quot;cn.jpush.android.EXTRA&quot;,extra);\n    PendingIntent pIntent = PendingIntent.getBroadcast(context, 1, intent, 0);\n\n\n    Intent intent1 = new Intent(context, HomeActivity.class);\n    intent1.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\n    //设置通知栏点击跳转\n    notification.setContentIntent(pIntent);\n\n    //发送通知\n    notifiId = (int) new Date().getTime();//通知Id\n    notifiTag = notifiId+&quot;leiren&quot;;//通知标签\n    notificationManager.notify(notifiTag,notifiId, notification.build());\n    }\n}</code></pre><p>遇见的问题：</p>\n<pre><code>在写完之后发现android9.0一直没有横幅提示，而在android7.0上边横幅提示一直不能自动消失，百度了很多资料，\n实现横幅提示有两种方法：\n\n1、设置通知的优先级\n2、setFullScreenIntent方法\n\n我把两个都设置了，结果出现了上述问题，最后我把setFullScreenIntent方法注释了，android9.0的横幅提示就出现了，\n同时android7.0的横幅提示也会自动消失。</code></pre>","categories":[],"tags":[{"name":"Android","slug":"Android","count":2,"path":"api/tags/Android.json"}]}